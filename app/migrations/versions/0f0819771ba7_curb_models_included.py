"""curb models included

Revision ID: 0f0819771ba7
Revises: 48ffdc2ab3d8
Create Date: 2025-10-28 07:10:07.514832

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0f0819771ba7'
down_revision: Union[str, Sequence[str], None] = '48ffdc2ab3d8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('curb_import_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('batch_id', sa.String(length=50), nullable=False, comment='Unique batch ID (CURB-YYYYMMDD-HHMMSS)'),
    sa.Column('import_type', sa.String(length=20), nullable=False, comment='DAILY, MANUAL, BACKFILL'),
    sa.Column('date_from', sa.Date(), nullable=False, comment='Import date range start'),
    sa.Column('date_to', sa.Date(), nullable=False, comment='Import date range end'),
    sa.Column('driver_id_filter', sa.String(length=50), nullable=True, comment='Driver ID filter (if any)'),
    sa.Column('cab_number_filter', sa.String(length=20), nullable=True, comment='Cab number filter (if any)'),
    sa.Column('status', sa.Enum('IN_PROGRESS', 'COMPLETED', 'FAILED', 'PARTIAL', name='importstatus'), nullable=False, comment='Import batch status'),
    sa.Column('started_at', sa.DateTime(), nullable=False, comment='When import started'),
    sa.Column('completed_at', sa.DateTime(), nullable=True, comment='When import completed'),
    sa.Column('duration_seconds', sa.Integer(), nullable=True, comment='Import duration'),
    sa.Column('total_trips_fetched', sa.Integer(), nullable=False, comment='Total trips from CURB API'),
    sa.Column('total_trips_imported', sa.Integer(), nullable=False, comment='Successfully imported trips'),
    sa.Column('total_trips_mapped', sa.Integer(), nullable=False, comment='Trips mapped to entities'),
    sa.Column('total_trips_posted', sa.Integer(), nullable=False, comment='Trips posted to ledger'),
    sa.Column('total_trips_failed', sa.Integer(), nullable=False, comment='Failed trips'),
    sa.Column('total_transactions_fetched', sa.Integer(), nullable=False, comment='Total transactions from CURB'),
    sa.Column('total_transactions_imported', sa.Integer(), nullable=False, comment='Successfully imported transactions'),
    sa.Column('reconciliation_attempted', sa.Boolean(), nullable=False, comment='Whether reconciliation was attempted'),
    sa.Column('reconciliation_successful', sa.Boolean(), nullable=False, comment='Whether reconciliation succeeded'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error details if failed'),
    sa.Column('error_details', sa.Text(), nullable=True, comment='Detailed error log (JSON)'),
    sa.Column('triggered_by', sa.String(length=50), nullable=False, comment='CELERY, API, MANUAL'),
    sa.Column('triggered_by_user_id', sa.Integer(), nullable=True, comment='User who triggered (if manual)'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['triggered_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_curb_import_date_range', 'curb_import_history', ['date_from', 'date_to'], unique=False)
    op.create_index('idx_curb_import_started', 'curb_import_history', ['started_at'], unique=False)
    op.create_index('idx_curb_import_status', 'curb_import_history', ['status'], unique=False)
    op.create_index(op.f('ix_curb_import_history_batch_id'), 'curb_import_history', ['batch_id'], unique=True)
    op.create_index(op.f('ix_curb_import_history_date_from'), 'curb_import_history', ['date_from'], unique=False)
    op.create_index(op.f('ix_curb_import_history_date_to'), 'curb_import_history', ['date_to'], unique=False)
    op.create_index(op.f('ix_curb_import_history_status'), 'curb_import_history', ['status'], unique=False)
    op.create_table('curb_trips',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('record_id', sa.String(length=50), nullable=False, comment='CURB RECORD ID (recycled quarterly)'),
    sa.Column('period', sa.String(length=6), nullable=False, comment='CURB PERIOD (YYYYMM)'),
    sa.Column('cab_number', sa.String(length=20), nullable=False, comment='Cab/Medallion number from CURB'),
    sa.Column('driver_id_curb', sa.String(length=50), nullable=False, comment='Driver ID from CURB (hack license)'),
    sa.Column('num_service', sa.String(length=20), nullable=True, comment='Service number'),
    sa.Column('start_datetime', sa.DateTime(), nullable=False, comment='Trip start date and time'),
    sa.Column('end_datetime', sa.DateTime(), nullable=False, comment='Trip end date and time'),
    sa.Column('trip_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Base trip fare'),
    sa.Column('tips', sa.Numeric(precision=10, scale=2), nullable=False, comment='Tip amount'),
    sa.Column('extras', sa.Numeric(precision=10, scale=2), nullable=False, comment='Extra charges'),
    sa.Column('tolls', sa.Numeric(precision=10, scale=2), nullable=False, comment='Toll charges'),
    sa.Column('tax', sa.Numeric(precision=10, scale=2), nullable=False, comment='Tax amount'),
    sa.Column('imp_tax', sa.Numeric(precision=10, scale=2), nullable=False, comment='Improvement tax'),
    sa.Column('total_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total trip amount'),
    sa.Column('ehail_fee', sa.Numeric(precision=10, scale=2), nullable=False, comment='E-Hail fee'),
    sa.Column('health_fee', sa.Numeric(precision=10, scale=2), nullable=False, comment='Health surcharge'),
    sa.Column('congestion_fee', sa.Numeric(precision=10, scale=2), nullable=False, comment='Congestion surcharge'),
    sa.Column('airport_fee', sa.Numeric(precision=10, scale=2), nullable=False, comment='Airport access fee'),
    sa.Column('cbdt_fee', sa.Numeric(precision=10, scale=2), nullable=False, comment='Central Business District Toll'),
    sa.Column('gps_start_lat', sa.Numeric(precision=10, scale=6), nullable=True, comment='Start latitude'),
    sa.Column('gps_start_lon', sa.Numeric(precision=10, scale=6), nullable=True, comment='Start longitude'),
    sa.Column('gps_end_lat', sa.Numeric(precision=10, scale=6), nullable=True, comment='End latitude'),
    sa.Column('gps_end_lon', sa.Numeric(precision=10, scale=6), nullable=True, comment='End longitude'),
    sa.Column('from_address', sa.Text(), nullable=True, comment='Pickup address'),
    sa.Column('to_address', sa.Text(), nullable=True, comment='Dropoff address'),
    sa.Column('payment_type', sa.Enum('CASH', 'CREDIT_CARD', 'PRIVATE_CARD', name='paymenttype'), nullable=False, comment='Payment method'),
    sa.Column('cc_number', sa.String(length=20), nullable=True, comment='Last 4 digits of card'),
    sa.Column('auth_code', sa.String(length=50), nullable=True, comment='Authorization code'),
    sa.Column('auth_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Authorized amount'),
    sa.Column('passenger_count', sa.Integer(), nullable=False, comment='Number of passengers'),
    sa.Column('distance_service', sa.Numeric(precision=10, scale=2), nullable=True, comment='Service distance (miles)'),
    sa.Column('distance_bs', sa.Numeric(precision=10, scale=2), nullable=True, comment='Base station distance'),
    sa.Column('reservation_number', sa.String(length=50), nullable=True, comment='Reservation/booking number'),
    sa.Column('driver_id', sa.Integer(), nullable=True, comment='Mapped BAT driver ID'),
    sa.Column('medallion_id', sa.Integer(), nullable=True, comment='Mapped BAT medallion ID'),
    sa.Column('vehicle_id', sa.Integer(), nullable=True, comment='Mapped BAT vehicle ID'),
    sa.Column('lease_id', sa.Integer(), nullable=True, comment='Mapped BAT lease ID'),
    sa.Column('mapping_method', sa.Enum('AUTO_MATCH', 'MANUAL_ASSIGNMENT', 'UNKNOWN', name='mappingmethod'), nullable=False, comment='How trip was mapped to entities'),
    sa.Column('mapping_confidence', sa.Numeric(precision=3, scale=2), nullable=False, comment='Mapping confidence (0.00-1.00)'),
    sa.Column('mapping_notes', sa.Text(), nullable=True, comment='Mapping details and notes'),
    sa.Column('manually_assigned', sa.Boolean(), nullable=False, comment='Was manually assigned'),
    sa.Column('assigned_by', sa.Integer(), nullable=True, comment='User who manually assigned'),
    sa.Column('assigned_on', sa.DateTime(), nullable=True, comment='When manually assigned'),
    sa.Column('payment_period_start', sa.Date(), nullable=True, comment='Payment week start (Sunday)'),
    sa.Column('payment_period_end', sa.Date(), nullable=True, comment='Payment week end (Saturday)'),
    sa.Column('import_batch_id', sa.String(length=50), nullable=False, comment='Reference to import batch'),
    sa.Column('imported_on', sa.DateTime(), nullable=False, comment='When imported into system'),
    sa.Column('posted_to_ledger', sa.Boolean(), nullable=False, comment='Whether posted to ledger'),
    sa.Column('ledger_posting_ids', sa.Text(), nullable=True, comment='JSON array of posting IDs'),
    sa.Column('posted_on', sa.DateTime(), nullable=True, comment='When posted to ledger'),
    sa.Column('reconciliation_status', sa.Enum('NOT_RECONCILED', 'RECONCILED', 'FAILED', name='reconciliationstatus'), nullable=False, comment='Reconciliation status with CURB system'),
    sa.Column('reconciled_on', sa.DateTime(), nullable=True, comment='When reconciled with CURB'),
    sa.Column('curb_recon_id', sa.String(length=50), nullable=True, comment='CURB reconciliation ID'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when this record was last updated'),
    sa.CheckConstraint('mapping_confidence >= 0 AND mapping_confidence <= 1', name='check_mapping_confidence'),
    sa.CheckConstraint('total_amount >= 0', name='check_total_amount'),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['lease_id'], ['leases.id'], ),
    sa.ForeignKeyConstraint(['medallion_id'], ['medallions.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_curb_trips_datetime', 'curb_trips', ['start_datetime', 'end_datetime'], unique=False)
    op.create_index('idx_curb_trips_driver_lease', 'curb_trips', ['driver_id', 'lease_id'], unique=False)
    op.create_index('idx_curb_trips_import_batch', 'curb_trips', ['import_batch_id'], unique=False)
    op.create_index('idx_curb_trips_payment_period', 'curb_trips', ['payment_period_start', 'payment_period_end'], unique=False)
    op.create_index('idx_curb_trips_record_period', 'curb_trips', ['record_id', 'period'], unique=True)
    op.create_index(op.f('ix_curb_trips_cab_number'), 'curb_trips', ['cab_number'], unique=False)
    op.create_index(op.f('ix_curb_trips_driver_id'), 'curb_trips', ['driver_id'], unique=False)
    op.create_index(op.f('ix_curb_trips_driver_id_curb'), 'curb_trips', ['driver_id_curb'], unique=False)
    op.create_index(op.f('ix_curb_trips_import_batch_id'), 'curb_trips', ['import_batch_id'], unique=False)
    op.create_index(op.f('ix_curb_trips_lease_id'), 'curb_trips', ['lease_id'], unique=False)
    op.create_index(op.f('ix_curb_trips_medallion_id'), 'curb_trips', ['medallion_id'], unique=False)
    op.create_index(op.f('ix_curb_trips_payment_period_end'), 'curb_trips', ['payment_period_end'], unique=False)
    op.create_index(op.f('ix_curb_trips_payment_period_start'), 'curb_trips', ['payment_period_start'], unique=False)
    op.create_index(op.f('ix_curb_trips_period'), 'curb_trips', ['period'], unique=False)
    op.create_index(op.f('ix_curb_trips_posted_to_ledger'), 'curb_trips', ['posted_to_ledger'], unique=False)
    op.create_index(op.f('ix_curb_trips_record_id'), 'curb_trips', ['record_id'], unique=False)
    op.create_index(op.f('ix_curb_trips_start_datetime'), 'curb_trips', ['start_datetime'], unique=False)
    op.create_index(op.f('ix_curb_trips_vehicle_id'), 'curb_trips', ['vehicle_id'], unique=False)
    op.create_table('curb_transactions',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('row_id', sa.String(length=50), nullable=False, comment='CURB transaction ROWID'),
    sa.Column('transaction_date', sa.DateTime(), nullable=False, comment='Transaction date and time'),
    sa.Column('cab_number', sa.String(length=20), nullable=False, comment='Cab/Medallion number'),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Transaction amount'),
    sa.Column('transaction_type', sa.String(length=10), nullable=False, comment='AP, DC, DUP, or ALL'),
    sa.Column('card_number', sa.String(length=20), nullable=True, comment='Last 4 digits of card'),
    sa.Column('auth_code', sa.String(length=50), nullable=True, comment='Authorization code'),
    sa.Column('driver_id', sa.Integer(), nullable=True),
    sa.Column('medallion_id', sa.Integer(), nullable=True),
    sa.Column('lease_id', sa.Integer(), nullable=True),
    sa.Column('curb_trip_id', sa.BigInteger(), nullable=True, comment='Linked CURB trip if matched'),
    sa.Column('import_batch_id', sa.String(length=50), nullable=False),
    sa.Column('imported_on', sa.DateTime(), nullable=False),
    sa.Column('reconciliation_status', sa.Enum('NOT_RECONCILED', 'RECONCILED', 'FAILED', name='reconciliationstatus'), nullable=False),
    sa.Column('reconciled_on', sa.DateTime(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['curb_trip_id'], ['curb_trips.id'], ),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['lease_id'], ['leases.id'], ),
    sa.ForeignKeyConstraint(['medallion_id'], ['medallions.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_curb_trans_batch', 'curb_transactions', ['import_batch_id'], unique=False)
    op.create_index('idx_curb_trans_cab', 'curb_transactions', ['cab_number'], unique=False)
    op.create_index('idx_curb_trans_date', 'curb_transactions', ['transaction_date'], unique=False)
    op.create_index(op.f('ix_curb_transactions_cab_number'), 'curb_transactions', ['cab_number'], unique=False)
    op.create_index(op.f('ix_curb_transactions_curb_trip_id'), 'curb_transactions', ['curb_trip_id'], unique=False)
    op.create_index(op.f('ix_curb_transactions_driver_id'), 'curb_transactions', ['driver_id'], unique=False)
    op.create_index(op.f('ix_curb_transactions_import_batch_id'), 'curb_transactions', ['import_batch_id'], unique=False)
    op.create_index(op.f('ix_curb_transactions_lease_id'), 'curb_transactions', ['lease_id'], unique=False)
    op.create_index(op.f('ix_curb_transactions_medallion_id'), 'curb_transactions', ['medallion_id'], unique=False)
    op.create_index(op.f('ix_curb_transactions_row_id'), 'curb_transactions', ['row_id'], unique=True)
    op.create_index(op.f('ix_curb_transactions_transaction_date'), 'curb_transactions', ['transaction_date'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_curb_transactions_transaction_date'), table_name='curb_transactions')
    op.drop_index(op.f('ix_curb_transactions_row_id'), table_name='curb_transactions')
    op.drop_index(op.f('ix_curb_transactions_medallion_id'), table_name='curb_transactions')
    op.drop_index(op.f('ix_curb_transactions_lease_id'), table_name='curb_transactions')
    op.drop_index(op.f('ix_curb_transactions_import_batch_id'), table_name='curb_transactions')
    op.drop_index(op.f('ix_curb_transactions_driver_id'), table_name='curb_transactions')
    op.drop_index(op.f('ix_curb_transactions_curb_trip_id'), table_name='curb_transactions')
    op.drop_index(op.f('ix_curb_transactions_cab_number'), table_name='curb_transactions')
    op.drop_index('idx_curb_trans_date', table_name='curb_transactions')
    op.drop_index('idx_curb_trans_cab', table_name='curb_transactions')
    op.drop_index('idx_curb_trans_batch', table_name='curb_transactions')
    op.drop_table('curb_transactions')
    op.drop_index(op.f('ix_curb_trips_vehicle_id'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_start_datetime'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_record_id'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_posted_to_ledger'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_period'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_payment_period_start'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_payment_period_end'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_medallion_id'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_lease_id'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_import_batch_id'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_driver_id_curb'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_driver_id'), table_name='curb_trips')
    op.drop_index(op.f('ix_curb_trips_cab_number'), table_name='curb_trips')
    op.drop_index('idx_curb_trips_record_period', table_name='curb_trips')
    op.drop_index('idx_curb_trips_payment_period', table_name='curb_trips')
    op.drop_index('idx_curb_trips_import_batch', table_name='curb_trips')
    op.drop_index('idx_curb_trips_driver_lease', table_name='curb_trips')
    op.drop_index('idx_curb_trips_datetime', table_name='curb_trips')
    op.drop_table('curb_trips')
    op.drop_index(op.f('ix_curb_import_history_status'), table_name='curb_import_history')
    op.drop_index(op.f('ix_curb_import_history_date_to'), table_name='curb_import_history')
    op.drop_index(op.f('ix_curb_import_history_date_from'), table_name='curb_import_history')
    op.drop_index(op.f('ix_curb_import_history_batch_id'), table_name='curb_import_history')
    op.drop_index('idx_curb_import_status', table_name='curb_import_history')
    op.drop_index('idx_curb_import_started', table_name='curb_import_history')
    op.drop_index('idx_curb_import_date_range', table_name='curb_import_history')
    op.drop_table('curb_import_history')
    # ### end Alembic commands ###
