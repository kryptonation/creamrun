"""ezpass models included

Revision ID: 860f1a7ec9bd
Revises: 0f0819771ba7
Create Date: 2025-10-28 22:44:37.084371

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '860f1a7ec9bd'
down_revision: Union[str, Sequence[str], None] = '0f0819771ba7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ezpass_import_history',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('batch_id', sa.String(length=100), nullable=False, comment='Unique batch identifier (EZPASS-YYYYMMDD-HHMMSS)'),
    sa.Column('import_type', sa.String(length=50), nullable=False, comment='CSV_UPLOAD or MANUAL_ENTRY'),
    sa.Column('file_name', sa.String(length=255), nullable=True, comment='Original CSV filename'),
    sa.Column('file_path', sa.String(length=500), nullable=True, comment='S3 path to uploaded file'),
    sa.Column('date_from', sa.Date(), nullable=True, comment='Start date filter for import'),
    sa.Column('date_to', sa.Date(), nullable=True, comment='End date filter for import'),
    sa.Column('status', sa.Enum('IN_PROGRESS', 'COMPLETED', 'COMPLETED_WITH_ERRORS', 'FAILED', name='importstatus'), nullable=False, comment='Import batch status'),
    sa.Column('total_rows_in_file', sa.Integer(), nullable=False, comment='Total rows in CSV'),
    sa.Column('total_transactions_imported', sa.Integer(), nullable=False, comment='Successfully imported transactions'),
    sa.Column('total_duplicates_skipped', sa.Integer(), nullable=False, comment='Duplicate tickets skipped'),
    sa.Column('total_auto_matched', sa.Integer(), nullable=False, comment='Transactions auto-matched to CURB trips'),
    sa.Column('total_manual_review', sa.Integer(), nullable=False, comment='Transactions requiring manual review'),
    sa.Column('total_unmapped', sa.Integer(), nullable=False, comment='Transactions with no mapping'),
    sa.Column('total_posted_to_ledger', sa.Integer(), nullable=False, comment='Transactions posted to ledger'),
    sa.Column('total_posting_failures', sa.Integer(), nullable=False, comment='Transactions that failed ledger posting'),
    sa.Column('total_errors', sa.Integer(), nullable=False, comment='Total errors encountered'),
    sa.Column('started_at', sa.DateTime(), nullable=False, comment='Import start time'),
    sa.Column('completed_at', sa.DateTime(), nullable=True, comment='Import completion time'),
    sa.Column('duration_seconds', sa.Integer(), nullable=True, comment='Total import duration'),
    sa.Column('error_log', sa.Text(), nullable=True, comment='JSON array of error messages'),
    sa.Column('summary', sa.Text(), nullable=True, comment='Human-readable import summary'),
    sa.Column('triggered_by', sa.String(length=50), nullable=False, comment='API, CELERY, or MANUAL'),
    sa.Column('triggered_by_user_id', sa.Integer(), nullable=True, comment='User who triggered import'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['triggered_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ezpass_history_dates', 'ezpass_import_history', ['date_from', 'date_to'], unique=False)
    op.create_index('idx_ezpass_history_started', 'ezpass_import_history', ['started_at'], unique=False)
    op.create_index('idx_ezpass_history_status', 'ezpass_import_history', ['status'], unique=False)
    op.create_index(op.f('ix_ezpass_import_history_batch_id'), 'ezpass_import_history', ['batch_id'], unique=True)
    op.create_index(op.f('ix_ezpass_import_history_status'), 'ezpass_import_history', ['status'], unique=False)
    op.create_table('ezpass_transactions',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('ticket_number', sa.String(length=100), nullable=False, comment='Unique EZPass ticket/transaction number'),
    sa.Column('transaction_id', sa.String(length=100), nullable=True, comment='Additional transaction ID if provided'),
    sa.Column('posting_date', sa.Date(), nullable=False, comment='Date transaction posted to EZPass account'),
    sa.Column('transaction_date', sa.Date(), nullable=False, comment='Date toll was incurred'),
    sa.Column('transaction_time', sa.String(length=10), nullable=True, comment='Time toll was incurred (HH:MM:SS)'),
    sa.Column('transaction_datetime', sa.DateTime(), nullable=True, comment='Combined transaction date+time'),
    sa.Column('plate_number', sa.String(length=20), nullable=False, comment='Vehicle plate from EZPass'),
    sa.Column('agency', sa.String(length=100), nullable=True, comment='Toll agency (e.g., MTABT, PANYNJ)'),
    sa.Column('activity', sa.String(length=100), nullable=True, comment='Activity type'),
    sa.Column('plaza_id', sa.String(length=50), nullable=True, comment='Plaza identifier'),
    sa.Column('entry_time', sa.String(length=10), nullable=True, comment='Entry time'),
    sa.Column('entry_plaza', sa.String(length=100), nullable=True, comment='Entry plaza name'),
    sa.Column('entry_lane', sa.String(length=100), nullable=True, comment='Entry lane'),
    sa.Column('exit_time', sa.String(length=10), nullable=True, comment='Exit time'),
    sa.Column('exit_plaza', sa.String(length=100), nullable=True, comment='Exit plaza name'),
    sa.Column('exit_lane', sa.String(length=100), nullable=True, comment='Exit lane'),
    sa.Column('vehicle_type_code', sa.String(length=50), nullable=True, comment='Vehicle type code'),
    sa.Column('toll_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Toll charge amount'),
    sa.Column('prepaid', sa.String(length=50), nullable=True, comment='Prepaid indicator'),
    sa.Column('plan_rate', sa.String(length=100), nullable=True, comment='Plan or rate type'),
    sa.Column('fare_type', sa.String(length=100), nullable=True, comment='Fare type'),
    sa.Column('balance', sa.Numeric(precision=10, scale=2), nullable=True, comment='Account balance after transaction'),
    sa.Column('vehicle_id', sa.Integer(), nullable=True, comment='Mapped BAT vehicle'),
    sa.Column('driver_id', sa.Integer(), nullable=True, comment='Mapped BAT driver'),
    sa.Column('lease_id', sa.Integer(), nullable=True, comment='Mapped BAT lease'),
    sa.Column('medallion_id', sa.Integer(), nullable=True, comment='Mapped BAT medallion'),
    sa.Column('hack_license_number', sa.String(length=50), nullable=True, comment='TLC license from CURB matching'),
    sa.Column('matched_trip_id', sa.String(length=100), nullable=True, comment='Reference to curb_trips.record_id'),
    sa.Column('mapping_method', sa.Enum('AUTO_CURB_MATCH', 'MANUAL_ASSIGNMENT', 'UNKNOWN', name='mappingmethod'), nullable=False, comment='How driver/lease was determined'),
    sa.Column('mapping_confidence', sa.Numeric(precision=3, scale=2), nullable=True, comment='Confidence score 0.00-1.00 for auto-matching'),
    sa.Column('mapping_notes', sa.Text(), nullable=True, comment='Notes about mapping process'),
    sa.Column('payment_period_start', sa.Date(), nullable=False, comment='Sunday of payment week'),
    sa.Column('payment_period_end', sa.Date(), nullable=False, comment='Saturday of payment week'),
    sa.Column('import_batch_id', sa.String(length=100), nullable=False, comment='Reference to import batch'),
    sa.Column('imported_on', sa.DateTime(), nullable=False, comment='When imported into system'),
    sa.Column('posting_status', sa.Enum('NOT_POSTED', 'POSTED', 'FAILED', name='postingstatus'), nullable=False, comment='Ledger posting status'),
    sa.Column('ledger_balance_id', sa.String(length=50), nullable=True, comment='Reference to ledger_balances.balance_id'),
    sa.Column('posted_on', sa.DateTime(), nullable=True, comment='When posted to ledger'),
    sa.Column('posting_error', sa.Text(), nullable=True, comment='Error message if posting failed'),
    sa.Column('resolution_status', sa.Enum('UNRESOLVED', 'RESOLVED', name='resolutionstatus'), nullable=False, comment='Payment resolution status'),
    sa.Column('resolved_on', sa.DateTime(), nullable=True, comment='When marked as resolved'),
    sa.Column('remapped_from_driver_id', sa.Integer(), nullable=True, comment='Previous driver if remapped'),
    sa.Column('remapped_on', sa.DateTime(), nullable=True, comment='When remapped'),
    sa.Column('remapped_by', sa.Integer(), nullable=True, comment='User who performed remapping'),
    sa.Column('remap_reason', sa.Text(), nullable=True, comment='Reason for remapping'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when this record was last updated'),
    sa.CheckConstraint('mapping_confidence IS NULL OR (mapping_confidence >= 0 AND mapping_confidence <= 1)', name='check_mapping_confidence_range'),
    sa.CheckConstraint('toll_amount >= 0', name='check_toll_amount_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['lease_id'], ['leases.id'], ),
    sa.ForeignKeyConstraint(['medallion_id'], ['medallions.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['remapped_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ezpass_driver_period', 'ezpass_transactions', ['driver_id', 'payment_period_start'], unique=False)
    op.create_index('idx_ezpass_import_batch', 'ezpass_transactions', ['import_batch_id'], unique=False)
    op.create_index('idx_ezpass_payment_period', 'ezpass_transactions', ['payment_period_start', 'payment_period_end'], unique=False)
    op.create_index('idx_ezpass_plate_date', 'ezpass_transactions', ['plate_number', 'transaction_date'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_driver_id'), 'ezpass_transactions', ['driver_id'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_hack_license_number'), 'ezpass_transactions', ['hack_license_number'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_import_batch_id'), 'ezpass_transactions', ['import_batch_id'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_lease_id'), 'ezpass_transactions', ['lease_id'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_mapping_method'), 'ezpass_transactions', ['mapping_method'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_matched_trip_id'), 'ezpass_transactions', ['matched_trip_id'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_medallion_id'), 'ezpass_transactions', ['medallion_id'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_payment_period_end'), 'ezpass_transactions', ['payment_period_end'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_payment_period_start'), 'ezpass_transactions', ['payment_period_start'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_plate_number'), 'ezpass_transactions', ['plate_number'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_posting_date'), 'ezpass_transactions', ['posting_date'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_posting_status'), 'ezpass_transactions', ['posting_status'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_resolution_status'), 'ezpass_transactions', ['resolution_status'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_ticket_number'), 'ezpass_transactions', ['ticket_number'], unique=True)
    op.create_index(op.f('ix_ezpass_transactions_transaction_date'), 'ezpass_transactions', ['transaction_date'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_transaction_datetime'), 'ezpass_transactions', ['transaction_datetime'], unique=False)
    op.create_index(op.f('ix_ezpass_transactions_vehicle_id'), 'ezpass_transactions', ['vehicle_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_ezpass_transactions_vehicle_id'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_transaction_datetime'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_transaction_date'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_ticket_number'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_resolution_status'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_posting_status'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_posting_date'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_plate_number'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_payment_period_start'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_payment_period_end'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_medallion_id'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_matched_trip_id'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_mapping_method'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_lease_id'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_import_batch_id'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_hack_license_number'), table_name='ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_transactions_driver_id'), table_name='ezpass_transactions')
    op.drop_index('idx_ezpass_plate_date', table_name='ezpass_transactions')
    op.drop_index('idx_ezpass_payment_period', table_name='ezpass_transactions')
    op.drop_index('idx_ezpass_import_batch', table_name='ezpass_transactions')
    op.drop_index('idx_ezpass_driver_period', table_name='ezpass_transactions')
    op.drop_table('ezpass_transactions')
    op.drop_index(op.f('ix_ezpass_import_history_status'), table_name='ezpass_import_history')
    op.drop_index(op.f('ix_ezpass_import_history_batch_id'), table_name='ezpass_import_history')
    op.drop_index('idx_ezpass_history_status', table_name='ezpass_import_history')
    op.drop_index('idx_ezpass_history_started', table_name='ezpass_import_history')
    op.drop_index('idx_ezpass_history_dates', table_name='ezpass_import_history')
    op.drop_table('ezpass_import_history')
    # ### end Alembic commands ###
