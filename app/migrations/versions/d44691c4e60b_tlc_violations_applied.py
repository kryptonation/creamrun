"""tlc violations applied

Revision ID: d44691c4e60b
Revises: 23c143637566
Create Date: 2025-10-31 07:39:58.802494

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd44691c4e60b'
down_revision: Union[str, Sequence[str], None] = '23c143637566'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tlc_violations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('violation_id', sa.String(length=50), nullable=False, comment='Unique violation identifier (e.g., TLC-2025-000001)'),
    sa.Column('summons_number', sa.String(length=50), nullable=False, comment='TLC summons number (e.g., FN0013186)'),
    sa.Column('tlc_license_number', sa.String(length=20), nullable=False, comment='TLC license/medallion number'),
    sa.Column('respondent_name', sa.String(length=255), nullable=False, comment='Entity or person named on summons'),
    sa.Column('occurrence_date', sa.Date(), nullable=False, comment='Date violation occurred'),
    sa.Column('occurrence_time', sa.Time(), nullable=False, comment='Time violation occurred'),
    sa.Column('occurrence_place', sa.String(length=500), nullable=True, comment='Location/address of violation'),
    sa.Column('borough', sa.Enum('BRONX', 'BROOKLYN', 'MANHATTAN', 'QUEENS', 'STATEN_ISLAND', name='borough'), nullable=False, comment='NYC borough of occurrence'),
    sa.Column('rule_section', sa.String(length=100), nullable=False, comment='TLC rule/regulation violated (e.g., 58-30(B))'),
    sa.Column('violation_type', sa.Enum('DRIVER_CONDUCT', 'VEHICLE_CONDITION', 'LICENSING_DOCUMENTATION', 'FARE_PASSENGER_ISSUES', 'OPERATIONAL_DISPATCH', 'ADMINISTRATIVE_REPORTING', name='violationtype'), nullable=False, comment='Category of violation'),
    sa.Column('violation_description', sa.Text(), nullable=False, comment='Description of violation'),
    sa.Column('fine_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Fine/penalty amount'),
    sa.Column('penalty_notes', sa.Text(), nullable=True, comment='Additional penalty information'),
    sa.Column('hearing_date', sa.Date(), nullable=True, comment='Scheduled hearing date'),
    sa.Column('hearing_time', sa.Time(), nullable=True, comment='Scheduled hearing time'),
    sa.Column('hearing_location', sa.Enum('OATH_MANHATTAN', 'OATH_BRONX', 'OATH_BROOKLYN', 'OATH_QUEENS', 'OATH_STATEN_ISLAND', 'REMOTE', name='hearinglocation'), nullable=True, comment='OATH hearing location'),
    sa.Column('disposition', sa.Enum('PENDING', 'DISMISSED', 'GUILTY', 'PAID', 'REDUCED', 'SUSPENDED', name='disposition'), nullable=False, comment='Hearing/case disposition'),
    sa.Column('disposition_date', sa.Date(), nullable=True, comment='Date of disposition'),
    sa.Column('disposition_notes', sa.Text(), nullable=True, comment='Additional disposition information'),
    sa.Column('driver_id', sa.Integer(), nullable=True, comment='Linked driver'),
    sa.Column('vehicle_id', sa.Integer(), nullable=True, comment='Linked vehicle'),
    sa.Column('medallion_id', sa.Integer(), nullable=False, comment='Linked medallion'),
    sa.Column('lease_id', sa.Integer(), nullable=True, comment='Active lease at time of violation'),
    sa.Column('mapped_via_curb', sa.Boolean(), nullable=True, comment='Whether driver was identified via CURB data'),
    sa.Column('curb_trip_id', sa.BigInteger(), nullable=True, comment='CURB trip used for driver identification'),
    sa.Column('status', sa.Enum('NEW', 'HEARING_SCHEDULED', 'DECISION_RECEIVED', 'RESOLVED', 'VOIDED', name='violationstatus'), nullable=False, comment='Violation lifecycle status'),
    sa.Column('posted_to_ledger', sa.Boolean(), nullable=True, comment='Whether posted to driver ledger'),
    sa.Column('posting_status', sa.Enum('PENDING', 'POSTED', 'FAILED', name='postingstatus'), nullable=False, comment='Ledger posting status'),
    sa.Column('ledger_posting_id', sa.Integer(), nullable=True, comment='Linked ledger posting'),
    sa.Column('ledger_balance_id', sa.Integer(), nullable=True, comment='Linked ledger balance'),
    sa.Column('posted_on', sa.DateTime(), nullable=True, comment='Timestamp when posted to ledger'),
    sa.Column('posted_by_user_id', sa.Integer(), nullable=True, comment='User who posted to ledger'),
    sa.Column('posting_error', sa.Text(), nullable=True, comment='Error message if posting failed'),
    sa.Column('admin_notes', sa.Text(), nullable=True, comment='Internal administrative notes'),
    sa.Column('is_voided', sa.Boolean(), nullable=True, comment='Whether violation is voided'),
    sa.Column('voided_on', sa.DateTime(), nullable=True, comment='Timestamp when voided'),
    sa.Column('voided_by_user_id', sa.Integer(), nullable=True, comment='User who voided the violation'),
    sa.Column('void_reason', sa.Text(), nullable=True, comment='Reason for voiding'),
    sa.Column('reversal_posting_id', sa.Integer(), nullable=True, comment='Reversal posting if voided after ledger post'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when this record was last updated'),
    sa.CheckConstraint('fine_amount > 0', name='chk_tlc_fine_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['curb_trip_id'], ['curb_trips.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['lease_id'], ['leases.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['ledger_balance_id'], ['ledger_balances.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['ledger_posting_id'], ['ledger_postings.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['medallion_id'], ['medallions.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['posted_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['reversal_posting_id'], ['ledger_postings.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['voided_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_tlc_disposition', 'tlc_violations', ['disposition'], unique=False)
    op.create_index('idx_tlc_hearing_date', 'tlc_violations', ['hearing_date'], unique=False)
    op.create_index('idx_tlc_occurrence_date_time', 'tlc_violations', ['occurrence_date', 'occurrence_time'], unique=False)
    op.create_index('idx_tlc_status_posting', 'tlc_violations', ['status', 'posting_status'], unique=False)
    op.create_index('idx_tlc_summons_driver', 'tlc_violations', ['summons_number', 'driver_id'], unique=False)
    op.create_index(op.f('ix_tlc_violations_borough'), 'tlc_violations', ['borough'], unique=False)
    op.create_index(op.f('ix_tlc_violations_disposition'), 'tlc_violations', ['disposition'], unique=False)
    op.create_index(op.f('ix_tlc_violations_driver_id'), 'tlc_violations', ['driver_id'], unique=False)
    op.create_index(op.f('ix_tlc_violations_hearing_date'), 'tlc_violations', ['hearing_date'], unique=False)
    op.create_index(op.f('ix_tlc_violations_id'), 'tlc_violations', ['id'], unique=False)
    op.create_index(op.f('ix_tlc_violations_is_voided'), 'tlc_violations', ['is_voided'], unique=False)
    op.create_index(op.f('ix_tlc_violations_lease_id'), 'tlc_violations', ['lease_id'], unique=False)
    op.create_index(op.f('ix_tlc_violations_mapped_via_curb'), 'tlc_violations', ['mapped_via_curb'], unique=False)
    op.create_index(op.f('ix_tlc_violations_medallion_id'), 'tlc_violations', ['medallion_id'], unique=False)
    op.create_index(op.f('ix_tlc_violations_occurrence_date'), 'tlc_violations', ['occurrence_date'], unique=False)
    op.create_index(op.f('ix_tlc_violations_posted_to_ledger'), 'tlc_violations', ['posted_to_ledger'], unique=False)
    op.create_index(op.f('ix_tlc_violations_posting_status'), 'tlc_violations', ['posting_status'], unique=False)
    op.create_index(op.f('ix_tlc_violations_status'), 'tlc_violations', ['status'], unique=False)
    op.create_index(op.f('ix_tlc_violations_summons_number'), 'tlc_violations', ['summons_number'], unique=True)
    op.create_index(op.f('ix_tlc_violations_tlc_license_number'), 'tlc_violations', ['tlc_license_number'], unique=False)
    op.create_index(op.f('ix_tlc_violations_vehicle_id'), 'tlc_violations', ['vehicle_id'], unique=False)
    op.create_index(op.f('ix_tlc_violations_violation_id'), 'tlc_violations', ['violation_id'], unique=True)
    op.create_index(op.f('ix_tlc_violations_violation_type'), 'tlc_violations', ['violation_type'], unique=False)
    op.create_table('tlc_violation_documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.String(length=50), nullable=False, comment='Unique document identifier'),
    sa.Column('violation_id', sa.Integer(), nullable=False, comment='Parent violation'),
    sa.Column('file_name', sa.String(length=255), nullable=False, comment='Original file name'),
    sa.Column('file_path', sa.String(length=500), nullable=False, comment='S3 or storage path'),
    sa.Column('file_size', sa.Integer(), nullable=False, comment='File size in bytes'),
    sa.Column('file_type', sa.String(length=50), nullable=False, comment='MIME type (e.g., application/pdf)'),
    sa.Column('document_type', sa.String(length=50), nullable=False, comment='Type (SUMMONS, HEARING_RESULT, PAYMENT_PROOF, OTHER)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Document description'),
    sa.Column('is_verified', sa.Boolean(), nullable=True, comment='Whether document has been verified'),
    sa.Column('verified_on', sa.DateTime(), nullable=True, comment='Verification timestamp'),
    sa.Column('verified_by_user_id', sa.Integer(), nullable=True, comment='User who verified'),
    sa.Column('uploaded_on', sa.DateTime(), nullable=False, comment='Upload timestamp'),
    sa.Column('uploaded_by_user_id', sa.Integer(), nullable=True, comment='User who uploaded'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when this record was last updated'),
    sa.CheckConstraint('file_size > 0 AND file_size <= 5242880', name='chk_tlc_doc_size'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['uploaded_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['verified_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['violation_id'], ['tlc_violations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_tlc_doc_violation', 'tlc_violation_documents', ['violation_id', 'uploaded_on'], unique=False)
    op.create_index(op.f('ix_tlc_violation_documents_document_id'), 'tlc_violation_documents', ['document_id'], unique=True)
    op.create_index(op.f('ix_tlc_violation_documents_id'), 'tlc_violation_documents', ['id'], unique=False)
    op.create_index(op.f('ix_tlc_violation_documents_violation_id'), 'tlc_violation_documents', ['violation_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tlc_violation_documents_violation_id'), table_name='tlc_violation_documents')
    op.drop_index(op.f('ix_tlc_violation_documents_id'), table_name='tlc_violation_documents')
    op.drop_index(op.f('ix_tlc_violation_documents_document_id'), table_name='tlc_violation_documents')
    op.drop_index('idx_tlc_doc_violation', table_name='tlc_violation_documents')
    op.drop_table('tlc_violation_documents')
    op.drop_index(op.f('ix_tlc_violations_violation_type'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_violation_id'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_vehicle_id'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_tlc_license_number'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_summons_number'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_status'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_posting_status'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_posted_to_ledger'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_occurrence_date'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_medallion_id'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_mapped_via_curb'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_lease_id'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_is_voided'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_id'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_hearing_date'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_driver_id'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_disposition'), table_name='tlc_violations')
    op.drop_index(op.f('ix_tlc_violations_borough'), table_name='tlc_violations')
    op.drop_index('idx_tlc_summons_driver', table_name='tlc_violations')
    op.drop_index('idx_tlc_status_posting', table_name='tlc_violations')
    op.drop_index('idx_tlc_occurrence_date_time', table_name='tlc_violations')
    op.drop_index('idx_tlc_hearing_date', table_name='tlc_violations')
    op.drop_index('idx_tlc_disposition', table_name='tlc_violations')
    op.drop_table('tlc_violations')
    # ### end Alembic commands ###
