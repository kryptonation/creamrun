"""driver loans included

Revision ID: 92cce0627ee7
Revises: 860f1a7ec9bd
Create Date: 2025-10-29 08:15:14.525962

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '92cce0627ee7'
down_revision: Union[str, Sequence[str], None] = '860f1a7ec9bd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('pvb_import_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch_id', sa.String(length=64), nullable=False, comment='Unique batch identifier (Format: PVB-IMPORT-YYYYMMDD-HHMMSS-XXXXX)'),
    sa.Column('import_source', sa.Enum('DOF_CSV', 'MANUAL_ENTRY', 'EMAIL', 'MAIL', name='violationsource'), nullable=False, comment='Source type of import'),
    sa.Column('file_name', sa.String(length=256), nullable=True, comment='Original filename'),
    sa.Column('status', sa.Enum('IN_PROGRESS', 'COMPLETED', 'PARTIAL', 'FAILED', name='importstatus'), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False, comment='Import start time'),
    sa.Column('completed_at', sa.DateTime(), nullable=True, comment='Import completion time'),
    sa.Column('duration_seconds', sa.Integer(), nullable=True, comment='Total import duration'),
    sa.Column('total_records_in_file', sa.Integer(), nullable=False, comment='Total records in source file'),
    sa.Column('records_imported', sa.Integer(), nullable=False, comment='Successfully imported records'),
    sa.Column('records_skipped', sa.Integer(), nullable=False, comment='Skipped (duplicates)'),
    sa.Column('records_failed', sa.Integer(), nullable=False, comment='Failed records'),
    sa.Column('records_mapped', sa.Integer(), nullable=False, comment='Auto-mapped to drivers'),
    sa.Column('records_posted', sa.Integer(), nullable=False, comment='Posted to ledger'),
    sa.Column('perform_matching', sa.Boolean(), nullable=False, comment='Whether to auto-match with CURB trips'),
    sa.Column('post_to_ledger', sa.Boolean(), nullable=False, comment='Whether to post matched violations to ledger'),
    sa.Column('auto_match_threshold', sa.Numeric(precision=5, scale=2), nullable=False, comment='Minimum confidence for auto-matching'),
    sa.Column('errors', sa.Text(), nullable=True, comment='JSON array of error messages'),
    sa.Column('triggered_by', sa.String(length=32), nullable=False, comment='API, CELERY, or MANUAL'),
    sa.Column('triggered_by_user_id', sa.Integer(), nullable=True, comment='User who triggered import (if manual)'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when this record was last updated'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['triggered_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_pvb_import_status_date', 'pvb_import_history', ['status', 'started_at'], unique=False)
    op.create_index(op.f('ix_pvb_import_history_batch_id'), 'pvb_import_history', ['batch_id'], unique=True)
    op.create_index(op.f('ix_pvb_import_history_id'), 'pvb_import_history', ['id'], unique=False)
    op.create_index(op.f('ix_pvb_import_history_status'), 'pvb_import_history', ['status'], unique=False)
    op.create_table('driver_loans',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('loan_id', sa.String(length=50), nullable=False, comment='Unique loan identifier (DL-YYYY-NNNN)'),
    sa.Column('loan_number', sa.String(length=50), nullable=True, comment='Display number for UI'),
    sa.Column('driver_id', sa.Integer(), nullable=False, comment='Borrower driver'),
    sa.Column('lease_id', sa.Integer(), nullable=False, comment='Associated lease'),
    sa.Column('loan_amount', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Principal amount'),
    sa.Column('interest_rate', sa.DECIMAL(precision=5, scale=2), nullable=False, comment='Annual percentage rate'),
    sa.Column('purpose', sa.String(length=255), nullable=True, comment='Reason for loan'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Additional notes'),
    sa.Column('loan_date', sa.Date(), nullable=False, comment='When loan created'),
    sa.Column('start_week', sa.Date(), nullable=False, comment='Sunday when payments start'),
    sa.Column('end_week', sa.Date(), nullable=True, comment='Estimated completion'),
    sa.Column('status', sa.Enum('DRAFT', 'ACTIVE', 'CLOSED', 'ON_HOLD', 'CANCELLED', name='loanstatus'), nullable=False, comment='Loan status'),
    sa.Column('total_principal_paid', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Principal paid to date'),
    sa.Column('total_interest_paid', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Interest paid to date'),
    sa.Column('outstanding_balance', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Amount still owed'),
    sa.Column('approved_by', sa.Integer(), nullable=True, comment='User who approved'),
    sa.Column('approved_on', sa.DateTime(), nullable=True, comment='Approval timestamp'),
    sa.Column('closed_on', sa.Date(), nullable=True, comment='When fully paid'),
    sa.Column('closure_reason', sa.String(length=255), nullable=True, comment='Why closed'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when this record was last updated'),
    sa.CheckConstraint('interest_rate >= 0 AND interest_rate <= 100', name='check_interest_rate_range'),
    sa.CheckConstraint('loan_amount > 0', name='check_loan_amount_positive'),
    sa.CheckConstraint('outstanding_balance >= 0', name='check_outstanding_balance_positive'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['lease_id'], ['leases.id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_driver_lease', 'driver_loans', ['driver_id', 'lease_id'], unique=False)
    op.create_index('idx_status_start_week', 'driver_loans', ['status', 'start_week'], unique=False)
    op.create_index(op.f('ix_driver_loans_driver_id'), 'driver_loans', ['driver_id'], unique=False)
    op.create_index(op.f('ix_driver_loans_id'), 'driver_loans', ['id'], unique=False)
    op.create_index(op.f('ix_driver_loans_lease_id'), 'driver_loans', ['lease_id'], unique=False)
    op.create_index(op.f('ix_driver_loans_loan_date'), 'driver_loans', ['loan_date'], unique=False)
    op.create_index(op.f('ix_driver_loans_loan_id'), 'driver_loans', ['loan_id'], unique=True)
    op.create_index(op.f('ix_driver_loans_start_week'), 'driver_loans', ['start_week'], unique=False)
    op.create_index(op.f('ix_driver_loans_status'), 'driver_loans', ['status'], unique=False)
    op.create_table('loan_schedules',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('installment_id', sa.String(length=50), nullable=False, comment='Unique installment ID (loan_id-INST-NN)'),
    sa.Column('loan_id', sa.String(length=50), nullable=False, comment='Parent loan'),
    sa.Column('installment_number', sa.Integer(), nullable=False, comment='Sequence number'),
    sa.Column('due_date', sa.Date(), nullable=False, comment='When due'),
    sa.Column('week_start', sa.Date(), nullable=False, comment='Sunday of week'),
    sa.Column('week_end', sa.Date(), nullable=False, comment='Saturday of week'),
    sa.Column('principal_amount', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Principal portion'),
    sa.Column('interest_amount', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Interest portion'),
    sa.Column('total_due', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Principal + Interest'),
    sa.Column('principal_paid', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Principal paid'),
    sa.Column('interest_paid', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Interest paid'),
    sa.Column('outstanding_balance', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Amount still owed'),
    sa.Column('status', sa.Enum('SCHEDULED', 'DUE', 'POSTED', 'PAID', 'SKIPPED', name='installmentstatus'), nullable=False, comment='Installment status'),
    sa.Column('ledger_balance_id', sa.String(length=50), nullable=True, comment='Reference to ledger balance'),
    sa.Column('posted_to_ledger', sa.Boolean(), nullable=False, comment='Whether posted'),
    sa.Column('posted_on', sa.DateTime(), nullable=True, comment='When posted'),
    sa.Column('posted_by', sa.Integer(), nullable=True, comment='User who posted'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when this record was last updated'),
    sa.CheckConstraint('interest_amount >= 0', name='check_interest_non_negative'),
    sa.CheckConstraint('outstanding_balance >= 0', name='check_installment_outstanding_positive'),
    sa.CheckConstraint('principal_amount > 0', name='check_principal_positive'),
    sa.CheckConstraint('total_due = principal_amount + interest_amount', name='check_total_due_calculation'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['loan_id'], ['driver_loans.loan_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['posted_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_due_date_status', 'loan_schedules', ['due_date', 'status'], unique=False)
    op.create_index('idx_loan_installment', 'loan_schedules', ['loan_id', 'installment_number'], unique=True)
    op.create_index('idx_posted_status', 'loan_schedules', ['posted_to_ledger', 'status'], unique=False)
    op.create_index('idx_week_period', 'loan_schedules', ['week_start', 'week_end'], unique=False)
    op.create_index(op.f('ix_loan_schedules_due_date'), 'loan_schedules', ['due_date'], unique=False)
    op.create_index(op.f('ix_loan_schedules_id'), 'loan_schedules', ['id'], unique=False)
    op.create_index(op.f('ix_loan_schedules_installment_id'), 'loan_schedules', ['installment_id'], unique=True)
    op.create_index(op.f('ix_loan_schedules_loan_id'), 'loan_schedules', ['loan_id'], unique=False)
    op.create_index(op.f('ix_loan_schedules_posted_to_ledger'), 'loan_schedules', ['posted_to_ledger'], unique=False)
    op.create_index(op.f('ix_loan_schedules_status'), 'loan_schedules', ['status'], unique=False)
    op.create_table('pvb_violations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('summons_number', sa.String(length=64), nullable=False, comment='Unique summons/ticket number from DOF'),
    sa.Column('plate_number', sa.String(length=16), nullable=False, comment='Vehicle plate number'),
    sa.Column('state', sa.Enum('NY', 'NJ', 'CT', 'PA', 'OTHER', name='violationstate'), nullable=False, comment='State of plate registration'),
    sa.Column('vehicle_type', sa.String(length=16), nullable=True, comment='Vehicle type code (e.g., OMT for Medallion)'),
    sa.Column('violation_date', sa.DateTime(), nullable=False, comment='Date and time of violation'),
    sa.Column('violation_code', sa.String(length=16), nullable=True, comment='Violation code'),
    sa.Column('violation_description', sa.Text(), nullable=True, comment='Description of violation'),
    sa.Column('county', sa.String(length=8), nullable=True, comment='County code (e.g., MN, BK, QN, BX)'),
    sa.Column('issuing_agency', sa.String(length=64), nullable=True, comment='Agency that issued violation'),
    sa.Column('street_name', sa.String(length=256), nullable=True, comment='Street where violation occurred'),
    sa.Column('intersecting_street', sa.String(length=256), nullable=True, comment='Intersecting street'),
    sa.Column('house_number', sa.String(length=32), nullable=True, comment='House number'),
    sa.Column('fine_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Base fine amount'),
    sa.Column('penalty_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Penalty amount'),
    sa.Column('interest_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Interest amount'),
    sa.Column('reduction_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Reduction amount (if any)'),
    sa.Column('payment_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Amount paid so far'),
    sa.Column('amount_due', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total amount currently due'),
    sa.Column('violation_status', sa.Enum('PENDING', 'ISSUED', 'PAID', 'DISMISSED', 'HEARING', name='violationstatus'), nullable=False, comment='Current status of violation'),
    sa.Column('judgment_entry_date', sa.DateTime(), nullable=True, comment='Date judgment was entered'),
    sa.Column('hearing_status', sa.String(length=64), nullable=True, comment='Hearing status if applicable'),
    sa.Column('driver_id', sa.Integer(), nullable=True, comment='Mapped driver'),
    sa.Column('vehicle_id', sa.Integer(), nullable=True, comment='Mapped vehicle'),
    sa.Column('medallion_id', sa.Integer(), nullable=True, comment='Mapped medallion'),
    sa.Column('lease_id', sa.Integer(), nullable=True, comment='Active lease at time of violation'),
    sa.Column('hack_license_number', sa.String(length=32), nullable=True, comment='TLC/Hack license number of responsible driver'),
    sa.Column('mapping_method', sa.Enum('AUTO_CURB_MATCH', 'MANUAL_ASSIGNMENT', 'UNMAPPED', name='mappingmethod'), nullable=False, comment='How violation was mapped to driver'),
    sa.Column('mapping_confidence', sa.Numeric(precision=5, scale=2), nullable=True, comment='Confidence score (0.00-1.00) for auto-matching'),
    sa.Column('matched_curb_trip_id', sa.BigInteger(), nullable=True, comment='CURB trip used for matching'),
    sa.Column('mapping_notes', sa.Text(), nullable=True, comment='Notes about mapping (especially for manual assignments)'),
    sa.Column('mapped_at', sa.DateTime(), nullable=True, comment='When mapping was performed'),
    sa.Column('mapped_by', sa.Integer(), nullable=True, comment='User who performed manual mapping'),
    sa.Column('posting_status', sa.Enum('NOT_POSTED', 'POSTED', 'FAILED', name='postingstatus'), nullable=False, comment='Whether posted to ledger'),
    sa.Column('ledger_posting_id', sa.String(length=64), nullable=True, comment='Reference to ledger_postings.posting_id'),
    sa.Column('ledger_balance_id', sa.String(length=64), nullable=True, comment='Reference to ledger_balances.balance_id'),
    sa.Column('payment_period_start', sa.DateTime(), nullable=True, comment='Payment period start (Sunday 00:00)'),
    sa.Column('payment_period_end', sa.DateTime(), nullable=True, comment='Payment period end (Saturday 23:59)'),
    sa.Column('posted_at', sa.DateTime(), nullable=True, comment='When posted to ledger'),
    sa.Column('posting_error', sa.Text(), nullable=True, comment='Error message if posting failed'),
    sa.Column('import_source', sa.Enum('DOF_CSV', 'MANUAL_ENTRY', 'EMAIL', 'MAIL', name='violationsource'), nullable=False, comment='Source of this violation record'),
    sa.Column('import_batch_id', sa.String(length=64), nullable=True, comment='Import batch identifier'),
    sa.Column('import_file_name', sa.String(length=256), nullable=True, comment='Original filename if from CSV/file'),
    sa.Column('is_archived', sa.Boolean(), nullable=True, comment='Flag indicating if the record is archived'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Flag to keep track of record is active or not'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User who created this record'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='User who last modified this record'),
    sa.Column('created_on', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when this record was created'),
    sa.Column('updated_on', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when this record was last updated'),
    sa.CheckConstraint('amount_due >= 0', name='check_amount_due_positive'),
    sa.CheckConstraint('fine_amount >= 0', name='check_fine_positive'),
    sa.CheckConstraint('mapping_confidence IS NULL OR (mapping_confidence >= 0 AND mapping_confidence <= 1)', name='check_confidence_range'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['lease_id'], ['leases.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['mapped_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['matched_curb_trip_id'], ['curb_trips.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['medallion_id'], ['medallions.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['modified_by'], ['users.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('summons_number', name='uq_pvb_summons_number')
    )
    op.create_index('idx_pvb_driver_status', 'pvb_violations', ['driver_id', 'posting_status'], unique=False)
    op.create_index('idx_pvb_mapping', 'pvb_violations', ['mapping_method', 'posting_status'], unique=False)
    op.create_index('idx_pvb_plate_date', 'pvb_violations', ['plate_number', 'violation_date'], unique=False)
    op.create_index(op.f('ix_pvb_violations_driver_id'), 'pvb_violations', ['driver_id'], unique=False)
    op.create_index(op.f('ix_pvb_violations_hack_license_number'), 'pvb_violations', ['hack_license_number'], unique=False)
    op.create_index(op.f('ix_pvb_violations_id'), 'pvb_violations', ['id'], unique=False)
    op.create_index(op.f('ix_pvb_violations_import_batch_id'), 'pvb_violations', ['import_batch_id'], unique=False)
    op.create_index(op.f('ix_pvb_violations_lease_id'), 'pvb_violations', ['lease_id'], unique=False)
    op.create_index(op.f('ix_pvb_violations_ledger_balance_id'), 'pvb_violations', ['ledger_balance_id'], unique=False)
    op.create_index(op.f('ix_pvb_violations_ledger_posting_id'), 'pvb_violations', ['ledger_posting_id'], unique=False)
    op.create_index(op.f('ix_pvb_violations_mapping_method'), 'pvb_violations', ['mapping_method'], unique=False)
    op.create_index(op.f('ix_pvb_violations_medallion_id'), 'pvb_violations', ['medallion_id'], unique=False)
    op.create_index(op.f('ix_pvb_violations_plate_number'), 'pvb_violations', ['plate_number'], unique=False)
    op.create_index(op.f('ix_pvb_violations_posting_status'), 'pvb_violations', ['posting_status'], unique=False)
    op.create_index(op.f('ix_pvb_violations_summons_number'), 'pvb_violations', ['summons_number'], unique=True)
    op.create_index(op.f('ix_pvb_violations_vehicle_id'), 'pvb_violations', ['vehicle_id'], unique=False)
    op.create_index(op.f('ix_pvb_violations_violation_date'), 'pvb_violations', ['violation_date'], unique=False)
    op.create_index(op.f('ix_pvb_violations_violation_status'), 'pvb_violations', ['violation_status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_pvb_violations_violation_status'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_violation_date'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_vehicle_id'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_summons_number'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_posting_status'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_plate_number'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_medallion_id'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_mapping_method'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_ledger_posting_id'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_ledger_balance_id'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_lease_id'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_import_batch_id'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_id'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_hack_license_number'), table_name='pvb_violations')
    op.drop_index(op.f('ix_pvb_violations_driver_id'), table_name='pvb_violations')
    op.drop_index('idx_pvb_plate_date', table_name='pvb_violations')
    op.drop_index('idx_pvb_mapping', table_name='pvb_violations')
    op.drop_index('idx_pvb_driver_status', table_name='pvb_violations')
    op.drop_table('pvb_violations')
    op.drop_index(op.f('ix_loan_schedules_status'), table_name='loan_schedules')
    op.drop_index(op.f('ix_loan_schedules_posted_to_ledger'), table_name='loan_schedules')
    op.drop_index(op.f('ix_loan_schedules_loan_id'), table_name='loan_schedules')
    op.drop_index(op.f('ix_loan_schedules_installment_id'), table_name='loan_schedules')
    op.drop_index(op.f('ix_loan_schedules_id'), table_name='loan_schedules')
    op.drop_index(op.f('ix_loan_schedules_due_date'), table_name='loan_schedules')
    op.drop_index('idx_week_period', table_name='loan_schedules')
    op.drop_index('idx_posted_status', table_name='loan_schedules')
    op.drop_index('idx_loan_installment', table_name='loan_schedules')
    op.drop_index('idx_due_date_status', table_name='loan_schedules')
    op.drop_table('loan_schedules')
    op.drop_index(op.f('ix_driver_loans_status'), table_name='driver_loans')
    op.drop_index(op.f('ix_driver_loans_start_week'), table_name='driver_loans')
    op.drop_index(op.f('ix_driver_loans_loan_id'), table_name='driver_loans')
    op.drop_index(op.f('ix_driver_loans_loan_date'), table_name='driver_loans')
    op.drop_index(op.f('ix_driver_loans_lease_id'), table_name='driver_loans')
    op.drop_index(op.f('ix_driver_loans_id'), table_name='driver_loans')
    op.drop_index(op.f('ix_driver_loans_driver_id'), table_name='driver_loans')
    op.drop_index('idx_status_start_week', table_name='driver_loans')
    op.drop_index('idx_driver_lease', table_name='driver_loans')
    op.drop_table('driver_loans')
    op.drop_index(op.f('ix_pvb_import_history_status'), table_name='pvb_import_history')
    op.drop_index(op.f('ix_pvb_import_history_id'), table_name='pvb_import_history')
    op.drop_index(op.f('ix_pvb_import_history_batch_id'), table_name='pvb_import_history')
    op.drop_index('idx_pvb_import_status_date', table_name='pvb_import_history')
    op.drop_table('pvb_import_history')
    # ### end Alembic commands ###
